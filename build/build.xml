<?xml version="1.0" encoding="UTF-8"?>
<project name="Air Native Extension Build Scripts" default="all">

    <!-- Config -->
    <property file="build.config"/>

    <!-- All -->
    <target name="all" depends="ios,android,swc,package" description="Full build of extension"/>

    <!-- iOS -->
    <target name="ios" description="Build iOS Library">

        <!-- make the build directory for the objc code -->
        <mkdir dir="temp/ios/"/>

        <!-- clean the build -->
        <exec executable="xcodebuild" failonerror="true" dir="../ios/">
            <arg line="-workspace ${name}.xcworkspace"/>
            <arg line="-scheme ${name}"/>
            <arg line="clean"/>
        </exec>

        <!-- compile the ios lib -->
        <exec executable="xcodebuild" failonerror="true" dir="../ios/">
            <arg line="-workspace ${name}.xcworkspace"/>
            <arg line="-scheme ${name}"/>
            <arg line="-sdk iphoneos"/>
            <arg line="-configuration Release"/>
            <arg line="SYMROOT=$(PWD)/../ios/build/"/>
        </exec>

        <!-- copy the ios lib to the base temp ios directory -->
        <copy todir="temp/ios/" overwrite="true" includeEmptyDirs="false">
            <fileset dir="../ios/build/Release-iphoneos"/>
        </copy>

        <!-- remove the build directory -->
        <delete dir="../ios/build/"/>

    </target>

    <!-- Android -->
    <target name="android" description="Build Android Library">

        <!-- paths -->
        <property name="build" value="../android/build"/>
        <property name="build.bundles" value="${build}/intermediates/bundles"/>
        <property name="build.exploded-aar" value="${build}/intermediates/exploded-aar"/>

        <!-- make the build directory for the java code -->
        <mkdir dir="temp/android/"/>

        <!-- get the java oath -->
        <exec executable="/usr/libexec/java_home" outputproperty="JAVA_HOME">
            <!-- <arg line="-v 1.8" /> -->
        </exec>

        <!-- compile the java code -->
        <exec executable="./gradlew" dir="../">
            <env key="JAVA_HOME" path="${JAVA_HOME}"/>
            <env key="ANDROID_HOME" path="${android.sdk.home}"/>
            <arg line=":android:assembleRelease"/>
        </exec>

        <!-- get the jar -->
        <copy file="${build.bundles}/release/classes.jar" tofile="temp/android/lib${name}.jar"/>

        <!-- Copy over required resources -->
        <copy todir="temp/android/${name}-res/">
            <fileset dir="${build}/intermediates/res/release/"/>
        </copy>

        <!-- Copy over the bundled libs -->
        <copy todir="temp/android/">
            <fileset dir="${build.bundles}/release/libs/" excludes="FlashRuntimeExtensions.jar, runtimeClasses.jar"/>
        </copy>

        <!-- Copy over the exploded aar libs -->
        <exec executable="/bin/bash">
            <arg value="copy_aars.sh"/>
        </exec>

        <!-- remove the build classes -->
        <delete dir="../android/build"/>
    </target>

    <!-- Actionscript -->
    <target name="swc" description="Build SWC library">
        <mkdir dir="temp/swc/content/"/>

        <fileset dir="../actionscript/src" casesensitive="yes" id="classfiles">
            <include name="**/*.as"/>
        </fileset>

        <pathconvert property="classlist" refid="classfiles" pathsep=" " dirsep=".">
            <regexpmapper from=".*src.(.*)\.as" to="\1"/>
        </pathconvert>

        <exec executable="${air.sdk.home}/bin/compc" failonerror="true">
            <env key="AIR_SDK_HOME" value="${air.sdk.home}"/>
            <arg line='-source-path ../actionscript/src'/>
            <arg line='-output temp/swc/${name}.swc'/>
            <arg line='-swf-version=29'/>
            <arg line='-external-library-path+="${air.sdk.home}/frameworks/libs/air/airglobal.swc"'/>
            <arg line='-include-classes ${classlist}'/>
        </exec>

        <unzip src="temp/swc/${name}.swc" dest="temp/swc/content" overwrite="true"/>

        <copy file="temp/swc/content/library.swf" todir="temp/ios" overwrite="true"/>
        <copy file="temp/swc/content/library.swf" todir="temp/ios-simulator" overwrite="true"/>
        <copy file="temp/swc/content/library.swf" todir="temp/android" overwrite="true"/>
        <copy file="temp/swc/content/library.swf" todir="temp/default" overwrite="true"/>
    </target>

    <!-- Package -->
    <target name="package" description="Create the extension package">

        <exec executable="${air.sdk.home}/bin/adt" failonerror="true" dir="temp/">
            <arg value="-package"/>
            <arg value="-target"/>
            <arg value="ane"/>
            <arg value="${name}.ane"/>
            <arg value="../extension.xml"/>
            <arg line="-swc swc/${name}.swc"/>
            <arg line="-platform iPhone-ARM -platformoptions ../platform-ios.xml -C ios/ ."/>
            <arg line="-platform Android-ARM -platformoptions ../platform-android.xml -C android/ ."/>
            <arg line="-platform default -C default/ ."/>
        </exec>

        <move file="temp/${name}.ane" todir="../bin"/>
        <delete dir="temp"/>

    </target>

    <!-- HTML Documentation (must be run manually) -->
    <target name="asdoc" description="generate the asdoc in readable html">
        <exec executable="${flex.sdk}/bin/asdoc${bin.ext}" failonerror="true">
            <env key="FLEX_HOME" value="${flex.sdk}"/>
            <env key="FALCON_HOME" value="${flex.sdk}"/>
            <arg line='-source-path ../actionscript/src'/>
            <arg line='-doc-sources ../actionscript/src'/>
            <arg line='-output ../docs'/>
            <arg line='-library-path+="${flex.sdk}/frameworks/libs/air/airglobal.swc"'/>
        </exec>
    </target>

</project>
